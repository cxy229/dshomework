#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*-----------------------------------------------------------------------*/
//读这个命题公式,判断它的有效性,如果不合理请重新输入
/*-----------------------------------------------------------------------*/
char *pp,formula[100]={0};
int valid=1;
char *getformula()
{
	char temp[100]={0},tempsign[3]={0};
	int i,j,len,flag=0;
	printf("\n请输入一个命题公式\n");
	printf("\n\"/\"表示 非,\"*\"表示 合取,\"+\"表示 析取,\">\"表示 蕴含,\":\"表示 等值\n");
	printf("\n\"()\"表示 括号\n");
	printf("\n命题变元用大写英文字母表示，以回车键结束输入：\n\n");
	while(flag==0)
	{
		gets_s(temp);
		if (temp[0] == '\0')
		{
			valid = 0;
			break;
		}
		for (j = 0, i = 0; *(temp + i); i++)
			if (*(temp + i) != ' ')
			{
			*(formula + j) = *(temp + i);
			j++;
			}
		len = strlen(formula);
		if (!(formula[len - 1] >= 65 && formula[len - 1] <= 90 || formula[len - 1] == ')') || !((formula[0] >= 65 && formula[0] <= 90) || formula[0] == '(' || formula[0] == '/'))
			flag = 0;
		else
		{
			for (pp = formula; *pp != '\0'; pp++)
			{
				if (!((*pp >= 65 && *pp <= 90) || *pp == '/' || *pp == '*' || *pp == '+' || *pp == '>' || *pp == ':' || *pp == '(' || *pp == ')'))
				{
					flag = 0; break;
				}
				else
				{
					tempsign[0] = *pp;
					tempsign[1] = *(pp + 1);
					tempsign[2] = '\0';
					if (strcmp(tempsign, "(+") == 0 || strcmp(tempsign, "(*") == 0 || strcmp(tempsign, "/)") == 0 || strcmp(tempsign, "+)") == 0 || strcmp(tempsign, "*)") == 0
						|| strcmp(tempsign, ")/") == 0 || strcmp(tempsign, "*+") == 0
						|| strcmp(tempsign, "/*") == 0 || strcmp(tempsign, ")(") == 0
						|| strcmp(tempsign, "+*") == 0 || strcmp(tempsign, "/+") == 0
						|| strcmp(tempsign, "()") == 0 || strcmp(tempsign, ">+") == 0
						|| strcmp(tempsign, "+>") == 0 || strcmp(tempsign, "*>") == 0
						|| strcmp(tempsign, ">*") == 0 || strcmp(tempsign, "(>") == 0
						|| strcmp(tempsign, ">)") == 0 || strcmp(tempsign, "/>") == 0
						|| strcmp(tempsign, "+:") == 0 || strcmp(tempsign, ":+") == 0
						|| strcmp(tempsign, "*:") == 0 || strcmp(tempsign, ":*") == 0
						|| strcmp(tempsign, ":>") == 0 || strcmp(tempsign, ">:") == 0
						|| strcmp(tempsign, "/:") == 0 || strcmp(tempsign, "(:") == 0
						|| strcmp(tempsign, ":)") == 0)
					{
						flag = 0; break;
					}
					if ((tempsign[0] >= 65 && tempsign[0] <= 90) && (tempsign[1] >= 65 && tempsign[1] <= 90))
					{
						flag = 0;
						break;
					}
					if (((tempsign[0] >= 65 && tempsign[0] <= 90) && (tempsign[1] == '/' || tempsign[1] == '(')) || ((tempsign[1] >= 65 && tempsign[1] <= 90) && tempsign[0] == ')'))
					{
						flag = 0;
						break;
					}
					else
						flag = 1;
				}
			}
		}
		if (flag == 0)
		{
			printf("表达是错误的，请重新输入：\n");
			for (i = 0; *(temp + i) != '\0'; i++)
				*(temp + i) = '\0';
			for (i = 0; *(formula + i) != '\0'; i++)
				*(formula + i) = '\0';
		}
	}
	pp = formula;
	return pp;
}
	char suf_formula[100]={0};
	char *convert_suffix(char *formula)
	{
		char stack[30],digit_stack[30];
		char *pt;
		int i=0,j=0,top=1,digit_top=1;
		pt=formula;
		for(i=0;*pt;pt++)
		{
			if (*pt >= 65 && *pt <= 90)
				suf_formula[i++] = *pt;
			else
				switch (*pt)
				//优先级高低顺序，栈内(、:、>、+、*、/依次升高，分别用1、2、3、4、5、6表示
			{
				case ':':
				{
					for(;2<=digit_stack[digit_top-1];top--,digit_top--)
					{
						suf_formula[i++]=stack[top-1];
						stack[top-1]='\0';
						digit_stack[digit_top-1]=0;
					}
					stack[top++]=':';
					digit_stack[digit_top++]=2;
				}
					break;
				case '>':
				{
					for(;3<=digit_stack[digit_top-1];top--,digit_top--)
					{
						suf_formula[i++] = stack[top - 1];
						stack[top - 1] = '\0';
						digit_stack[digit_top - 1] = 0;
					}
					stack[top++] = '>';
					digit_stack[digit_top++] = 3;
				}
					break;
				case '+':
				{
					for(;4<=digit_stack[digit_top-1];top--,digit_top--)
					{
						suf_formula[i++]=stack[top-1];
						stack[top-1]='\0';
						digit_stack[digit_top-1]=0;
					}
					stack[top++]='+';
					digit_stack[digit_top++]=4;
				}
					break;
				case '*':
				{
					for(;5<=digit_stack[top-1];top--,digit_top--)
					{
						suf_formula[i++]=stack[top-1];
						stack[top-1]='\0';
						digit_stack[digit_top-1]=0;
					}
					stack[top++]='*';
					digit_stack[digit_top++]=5;
				}
					break;
				case '/':
				{
					for(;6<=digit_stack[top-1];top--,digit_top--)
					{
						suf_formula[i++]=stack[top-1];
						stack[top-1]='\0';
						digit_stack[digit_top-1]=0;
					}
					stack[top++]='/';
					digit_stack[digit_top++]=6;
				}
					break;
				case '(':
					stack[top++]='(';
					digit_stack[digit_top++]=1;
					break;
				case ')':
					for (; stack[top - 1] != '('; top--, digit_top--)
					{ suf_formula[i++] = stack[top - 1];
					stack[top - 1] = '\0';
					digit_stack[digit_top - 1] = 0;
					}
					stack[top - 1] = '\0';
					digit_stack[top - 1] = 0;
					top--; digit_top--;
					break;
				default:;
			}
   }
   for (; top >= 1; i++, top--)
   {
	   if (stack[top - 1])
		   suf_formula[i] = stack[top - 1];
   }
   printf("\n");
   return suf_formula;
 }
 char var[16]={0};
 void variable(char *suf_formula)
 {
	 int i,j,len=0,flag=0;
	 char temp;
	 for(i=0;*(suf_formula+i);i++)
		 //统计后缀表达式中的
	 {               //变元
		 if(suf_formula[i]>=65&&suf_formula[i]<=90)
		 {
			 for(j=0;*(var+j);j++)
				 if(suf_formula[i]==var[j])
				 {
				 flag=1;
				 break;
				 }
			 if(flag!=1)
			 {
				 len=strlen(var);
				 var[len]=suf_formula[i];
			 }
			 flag=0;
		 }
	 }
	 for(i=0;*(var+i);i++)                //从小到大排列变元
		 for(j=i+1;*(var+j);j++)
			 if(var[i]>var[j])
			 {
		         temp=var[i];
				 var[i]=var[j];
				 var[j]=temp;
			 }
 }
	 char normal_form[100][16]={0};
	 void calc(char *suf_formula)
	 {
		 char bin_val[16] = { 0 };              //指派真值
		 char  suf_val[100]={0};              //后缀表达式相应的变元真值、运算符构成的序列
		 int  i,j,end=0,sum,result=1,index,temp_index,flag=0,xiqu_num=0,hequ_num=0;
		 char *p,temp;
		 int xiqu[50]={0},hequ[50]={0};
		 variable(suf_formula);
		 index=strlen(var);
		 temp_index=index;
		 if(index==0)                        //根据变元数计算指派的真值的最大值
			 result=1;
		 else
			 for(;temp_index>0;temp_index--)
				 result=result*2;
		 printf("\n该命题公式的真值表如下\n");
		 for(i=0;*(var+i);i++)
			 printf("%c  ",*(var+i));
		 printf("\t\t");
		 printf("%s\n\n",formula);
		 for(sum=0;sum<result;sum++)
		 {
			 j=sum;
			 for(i=0;i<16;i++)
				 bin_val[i]=0+'0';
			 for(i=0;j!=0;i++)               //指派的真值以二进制字符串形式存储
			 {
				 bin_val[i]=j%2+'0';
				 j=j/2;
			 }
			 for(j=index;j>0;j--)            //输出指派的真值
				 printf("%d  ",bin_val[j-1]-'0');
			 strcpy_s(suf_val,suf_formula);
			 for(i=0;i<index/2;i++)          //因变元（大写英文字母 ）从小到大排列 ，以A为最高位，
			 {                            //而上面指派的真值刚好从bin_val低位（对应A位）开始，
				 temp=bin_val[i];           //故需将真值序列反序
				 bin_val[i]=bin_val[index-i-1];
				 bin_val[index-i-1]=temp;
			 }
			 for(i=0;suf_formula[i];i++)
				 for(j=0;var[j];j++)
					 if(var[j]==suf_formula[i])
						 suf_val[i]=bin_val[j];
			 p=suf_val;
			 for(i=0;*(p+i);)               //计算由变元和运算符构成的后缀表达式
			 {
				 switch(*(p+i))
				 {
				 case ':':
					 if(*(p+i-1)==*(p+i-2))
					 {
						 *(p+i-2)='1';
						 for(j=i+1;*(p+j);j++)
							 *(p+j-2)=*(p+j);
						 *(p+j-1)='\0';
						 *(p+j-2)='\0';
					 }
					 else
					 {
						 *(p + i - 2) = '0';
						 for (j = i + 1; *(p + j); j++)
							 *(p + j - 2) = *(p + j);
						 *(p + j - 1) = '\0';
						 *(p + j - 2) = '\0';
					 }
					 i=0;
					 break;
				 case '>':
					 if(*(p+i-1)=='0'&&*(p+i-2)=='1')
					 {
						 *(p+i-2)='0';
						 for(j=i+1;*(p+j);j++)
							 *(p+j-2)=*(p+j);
						 *(p+j-1)='\0';
						 *(p+j-2)='\0';
					 }
					 else
					 {
						 *(p+i-2)='1';
						 for(j=i+1;*(p+j);j++)
							 *(p+j-2)=*(p+j);
						 *(p+j-1)='\0';
						 *(p+j-2)='\0';
					 }
					 i=0;
					 break;
				 case '+':
					 if(*(p+i-1)=='1'&&*(p+i-2)=='1')
					 {
						 *(p + i - 2) = '1';
						 for (j = i + 1; *(p + j); j++)
							 *(p + j - 2) = *(p + j);
						 *(p + j - 1) = '\0';
						 *(p + j - 2) = '\0';
					 }
					 else
					 {
						 *(p+i-2)=(*(p+i-2)-'0')+(*(p+i-1)-'0')+'0';
						 for(j=i+1;*(p+j);j++)
							 *(p+j-2)=*(p+j);
						 *(p+j-1)='\0';
						 *(p+j-2)='\0';
					 }
					 i=0;
					 break;
				 case '*':
					 *(p+i-2)= (*(p+i-2)-'0')*(*(p+i-1)-'0')+'0';
					 for(j=i+1;*(p+j);j++)
						 *(p+j-2)=*(p+j);
					 *(p+j-1)='\0';
					 *(p+j-2)='\0';
					 for(j=i+1;*(p+j);j++)
						 *(p+j-1)=*(p+j);
					 *(p+j-1)='\0';
					 i=0;
					 break;
				 default:  i++;
					 if (*(suf_val + 1) == '\0')
						 end = 1;
				 }
				 if (end == 1)
					 break;
			 }
			 end = 0;
			 printf("\t\t%d\n", *p - '0');
			 if (*p - '0' == 1)
				 xiqu[xiqu_num++] = sum + 1;
			 else
				 if (*p - '0' == 0)
					 hequ[hequ_num++] = sum + 1;
		  }
		  printf("\n主合取范式如下:\n");
		  for (i = 0; xiqu[i] != 0; i++)
		  {
				 printf("M%d", xiqu[i] - 1);
				 if (xiqu[i + 1] != 0)printf("+");
		  }
		  printf("\n主析取范式如下:\n");
		  for(i=0;hequ[i]!=0;i++)
		  {
			  printf("m%d",hequ[i]-1);
			  if(hequ[i+1]!=0)printf("*");
		  }
 }
 /*-----------------------------------------------------------------------*/
 //                             主要功能
 /*-----------------------------------------------------------------------*/
 int main()
 {
	 char *formula;
	 formula = getformula();
	 if (valid == 1)         //输入的表达式非空才可继续执行(即第一个字符不是回车符）
	 {
		 convert_suffix(formula);
		 calc(suf_formula);
	 }
	 getchar();
	 return 0;
 }
