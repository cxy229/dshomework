#include<iostream>
using namespace std;

class Node
{
	int iNum[5];
public:
	Node *pNext;
	Node(int x[],int n)
	{
		int i;
		for(i=0;i<n&&i<5;i++)
			iNum[i]=x[i];
		if(i<4)
			for(i;i<5;i++)
				iNum[i]=0;
		pNext=NULL;
	}
	Node()
	{
		for(int i=0;i<5;i++)
			iNum[i]=0;
		pNext=NULL;
	}
	int* getNum(){return iNum;};
	void print()
	{
		for(int i=0;i<5;i++)
			cout<<iNum[i]<<ends;
	}
};

class List
{
protected:
	int count;
	Node* pHead;
	Node* pTail;
public:
	List(){pHead=pTail=NULL;count=0;}
	List(Node &p){
		pHead=pTail=&p;count=1;}
	List(List &p){
		pHead=p.getHead();
		pTail=p.getTail();
		count=p.getCount();
	}
	Node* getHead(){return pHead;}
	Node* getTail(){return pTail;}
	int getCount(){return count;}
	void add(Node& p);
	void show();
	void insert(Node& p,int x);            //插入第x个节点之后
	void cancle(int x);                    //删除第x个节点
	Node* scearch(int x,int& num);
};


void List::insert(Node &p,int x)             //插入第x个节点之后
{
	int i;
	Node* back=pHead;
	Node* front=pHead;

	if(x>count||x<0)
		exit(0);
	if(x==0)
	{
		p.pNext=pHead;
		pHead=&p;
		exit(0);
	}
	for(i=0;i<x;i++)
		back=back->pNext;
	for(i=0;i<x-1;i++)
		front=front->pNext;
	front->pNext=&p;
	p.pNext=back;
	count++;
}

void List::cancle(int x)               //删除第x个节点
{
	int i;
	Node* back=pHead;
	Node* front=pHead;

	if(x>count||x<0)
		exit(0);
	if(x==0)
	{
		pHead=pHead->pNext;
		exit(0);
	}
	for(i=0;i<x;i++)
		back=back->pNext;
	for(i=1;i<x-1;i++)
		front=front->pNext;
	front->pNext=back;
	count--;
}

void List::add(Node& p)        //添加节点
{
	if(pHead==NULL)
		pHead=&p;
	else
		pTail->pNext=&p;
	pTail=&p;
	count++;
}
void List::show()                //输出链表
{
	Node* p=pHead;
	for(int i=1;p!=NULL;i++)
	{
		cout<<i<<"  :  ";
		p->print();
		cout<<endl;
		p=p->pNext;
	}
}

Node* List::scearch(int x,int& num)
{
	int i,*a;
	Node* he=pHead;

	num=-1;
	if(x<=0)
		exit(0);

	while(he!=NULL)
	{
		a=he->getNum();
		for(i=0;i<5;i++)
			if(a[i]==x)
			{
				num=i;
				return he;
			}
		he=he->pNext;
	}

	return NULL;
}

int main()
{
	int a1[5]={1,2,3,4,5},a2[6]={6,7,8,9,10,11};
	int a3[3]={12,13,14},a4[2]={15,16};
	int num,x;
	Node n1(a1,5),n2(a2,6),n3(a3,3),n4(a4,2);
	Node* find;
	List lis(n1);
	lis.add(n2);
	lis.add(n3);
	lis.add(n4);

	lis.show();

	while(1)
	{
		cout<<"请输入要查找元素"<<endl;
		cin>>x;

		find=lis.scearch(x,num);
		if(find==NULL)
			cout<<"链表中无此元素"<<endl;
		else
		{
			cout<<"链表中有此元素"<<endl<<"其节点元素为 ："<<endl;
			find->print();
			cout<<endl<<"其在该节点中的序号为 ： "<<num+1<<endl;
		}
		cout<<endl;
	}
	system("pause");
	return 0;

}
